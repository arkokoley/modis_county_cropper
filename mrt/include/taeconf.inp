/****************************************************************************
 *      Copyright (c) 1993, 1994
 *      Century Computing, Inc.
 *      ALL RIGHTS RESERVED
 *
 *      The software (programs, data bases and/or documentation) on or in
 *      any media can not be reproduced, disclosed, or used except under
 *      the terms of the TAE Plus Software License Agreement.
 *
 ***************************************************************************/



/*>> UNIX<<*/
/* TAECONF - Definitions associated with TAE configuration.
 *
 * CHANGE LOG:
 *
 *	07-DEC-82 add MOVE_STRUCT macro...PEB
 *	12-DEC-82 add VAX_VMS, ASCII symbol...palm
 *	16-DEC-82 incorporate TAESTD.INP here..palm
 *		  Also, changed ALIGN to char since VAX/C doesn't align...palm
 *	16-DEC-82 Changed MAXREF to 75
 *	12-JAN-83 add MAXFORVAL...PEB
 *	10-FEB-83 add SESSION_LOG conditional compilation flag...PEB
 *	25-feb-83 add KEYSIZ...palm
 *	28-Feb-83 add LARGEST_TAEINT and SMALLEST_TAEINT...nhe
 *	04-mar-83	Add BIG_MACHINE...palm
 *	14-mar-83	Add NEXTSIZ...palm
 *	30-mar-83	Change NORMAL, ABNORMAL...palm
 *	31-MAR-83	ADD SYNCH_EFN...palm
 *	22-apr-83	Move macro UPPER here from string package...dm
 *	15-jun-83	Add new switch bit for batch sys$output...jtm
 *	17-jun-83	Change MAXVAL to 35...peb
 *	24-aug-83	Add CHAR_ESCAPE...peb
 *	08-sep-83	Add MAX_PROC_NEXT...palm
 *	13-sep-83	Add HISTORY_LOG...palm
 *	19-sep-83	UNIX/BSD/VAX version ...palm
 *	10-oct-83	Add VAX symbol...palm
 *	13-nov-83	Define f_open as f__open to avoid confict  with
 *			the FORTRAN library routine in outboard programs...dm
 *	30-nov-83	Also define s_copy as s__copy ...dm
 *	18-apr-84	Update for TAE-V1.2 implementation...dm
 *	19-may-84	Delete TAE_ASYNC definition,(done in make file)...dm
 *	14-jun-84	Update for portability within UNIX world...dm
 *	22-jun-84	Add LONG_ALIGN...dm
 *	02-jul-84	Make ALIGN a processor dependent parameter...dm
 *	16-jun-85	Update for TAE-V1.3 implementation...dm
 *	03-dec-86	Put parens around defined constants that have
 *			arithmetic (to avoid substitution surprises)...peb
 *	03-dec-86	Add MAX_COMPACT_COUNT...peb
 *	21-jan-87	Add PIPESIZ...lia
 *	19-Feb-87	Merge RCJM changes from VMS V1.4 version:   ...gc
 *			    Add defines for HOST_CHAR, SW_NO_PDFCOPY,
 *			    TAE_ASYNC, TAE_RCJM.
 *      11-Aug-87       Add version 2.2 declarations...tpl
 *	24-Feb-88	PR1504: Add LABELSIZ...ljn
 *	09-mar-88	Avoid C++ compilation error on TAE_ASYNC double
 *			...palm
 *	24-mar-88	Delete TAE_RCJM #define...ljn
 *	03-apr-88	NAME2, NAME3, etc...ljn
 *	07-apr-88	Condiionalize #define of TRUE, FALSE...ljn
 *	21-jun-88	-remove ASCII dependency; remove UPPER macro...tp
 *	27-sep-88	APLIB_COUNT from 15 to 50...ljn
 *	26-oct-88	Deleted ifdef's on OPTIMIZE, ENA_OVER; changed 
 *			processing of ALIGN...ljn
 *	10-nov-88	Added SYSV and hpux defines; deleted BSD symbols...ljn
 *	23-dec-88	Increased CMDLINSIZ...ljn
 *	26-jan-89	INT_MAXVAL comments; increased CMDLINSIZ...palm
 *	01-feb-89	set MAXVAL to 300...palm
 * 28-feb-89	Rename processor.inp to sitedef.inp...ljn
 * 17-jul-89	Add another token concatenation operator for c++...ljn
 *		(11-dec-89: broke out into tokencat.h...ljn)
 * 14-aug-89	Sun4's need ALIGN of double...ljn
 * 21-jan-90	HP9000S800 need ALIGN of double...ljn
 * 24-jan-90	__GNU__ has been dropped in g++ 1.36 ???...ljn
 * 08-feb-90	__STDCPP__ picks up ANSI C preprocessor???...ljn
 * 05-dec-90	PR578: Sun C documentation says align for double type on a 
 *		Sun 4 is on an 8-byte boundary. G++ used to require same but 
 *		but no longer does...ljn
 * 06-feb-91	Define FAST_ALLOC...ljn
 * 27-feb-92	Modify NAME* macro for Sun C++...ljn
 * 11-may-92    Sun C++ changes PR1410...tpl
 * 27-may-92	IFDEF gnu for free declaration PR1444...tpl
 * 22-jul-92	PR1519: define UNSUPPORTED, CLASSIC_FUNCTION and ADA_FUNCTION...kbs
 * 11-sep-92    PR875 Increased token size to handle new validsiz...tpl
 * 01-oct-92    Tokencat problems...ljn/rt
 * 05-oct-92	IBM RS/6000 port...rt
 * 13-oct-92	Sun and SGI seem to be the only machines that do tokencat
 *		differently...rt
 * 14-oct-92	WRONG!  SGI is the only one who uses the old tokencat...rt
 * 14-oct-92	PR1684: Compatibility problems with the definition of free()
 *		among the various support C++ compilers. At the moment, only
 *		the Sun C++ compiler defines it as free(char *) all other
 *		compilers seem to use free(void *). Also changed all #includes
 *		to use <> vs. ""...krw
 * 19-oct-92	SGI and Sun (non GNU) uses the old tokencat...rt
 * 22-oct-92	Should use stdlib.h instead of malloc.h in Ultrix...rt
 * 06-nov-92	PR1440, PR1717 added define of SW_NO_VALIDATE for TM...krw
 * 11-nov-92    SGI needs stdlib.h and the cast definition of free((char*)A)..rt
 * 20-jan-93    Same for IBM RS/6000...rt
 * 22-apr-93	Added typedefs for register-able script functions...swd
 * 03-jun-93	Changed kr_ansi.h to TAEProto.h, ARGS to _TAE_PROTO...kbs
 * 09-jul-93	Changes necessary for use with vmcoproto.h...rt
 * 18-aug-93	Needed to enclose malloc.h in a __cplusplus extern...rt
 * 05-nov-93	PR2458: HP needs stdlib.h, too...rt
 * 08-dec-93	Solaris port: Since only our Sparc, non-Solaris does not need
 *         	stdlib.h, reflect this in cpp directive so we don't need to
 *         	list every platform...kbs,rt
 * 09-dec-93	More Solaris port (backported dag from aug-93)...cob
 * 15-dec-93	Solaris V53 port...dag
 * 26-jan-94	SGI port: can't use stdlib.h because it has no mallopt;
 *		SGI now uses free(void *)...dag
 * 05-apr-94	Concurrent port: use malloc.h since there's no stdlib.h...dag
 * 11-apr-94	v5.3 RS/6000 port...dag
 * 11-apr-94	Concurrent port: ride on SGI way of including malloc;
 *		prototype calloc...dgf 
 * 13-apr-94	Concurrent port: /usr/include/CC/malloc.h cannot be enclosed
 *		in an extern "C"...rt
 * 16-jun-94	Intergraph Port: Need correct NAME2 definition and set ALIGN
 *		to double...bth/rt
 * 24-jun-94    SCO port (pr-2779): Make ALIGN double, define 
 *		BIT_FIELD_ALIGN...rt, swd
 * 22-feb-95	Defined ALIGN for sparc machines.
 *		Brian Davis - EROS Data Center
 * 23-mar-95    Defined ALIGN for DGUX.  Added typecasts for small and large
 *		ints, MAX_COMPACT_COUNT, MAX_COMPACT_COUNT, easier
 *		SMALLEST_TAEINT def
 *		Brian Davis - EROS Data Center
 * 16-oct-95	Defined MAXADDENV to permit dynamic allocation of
 *		envioronment buffer.
 *		Richard White - Penn State University
 * 02-nov-95	Removed the SIGCHLD define.  This should be picked up on all
 *		systems from /usr/include/sys/signal.h.
 *		Jim Fenno - EROS Data Center
 * 05-dec-95	Modified so ALIGN is always a double.  This is the worst case
 *		and there is no sense in trying to save a few bytes.
 *		Jim Fenno - EROS Data Center
 */

#ifndef I_STD_TAECONF		/* prevent double include		*/ 
#define I_STD_TAECONF	0

#include	<sitedef.inp>
#include	<stdh.inp>
#include	<taeproto.h>

#if !defined(masscomp)
/* If non-Sun or Solaris, we need stdlib.h. Don't need on non-Solaris Sun. */
#if ( !defined(sun) || (defined(sun) && OSMajorVersion >= 5) )
#include        <stdlib.h>
#else
#ifdef __cplusplus
extern "C" {
#endif
#include	<malloc.h>	/* Get system malloc, free definitions  */
#ifdef __cplusplus
}
#endif
#endif
#endif

#if defined(masscomp)
#ifndef __cplusplus
char *calloc();
#endif
#include        <malloc.h>
#endif

/* The host-dependent pseudo storage classes and data types specific to TAE.
 */

typedef double	TAEFLOAT;	/* internal storage for TAE float parms	*/
typedef int	TAELOG;		/* FORTRAN logical data type		*/

/*
 *	TAEINT is a defines rather than typedef because VAX/C often
 *      has  trouble sizeof(typedef)
 */

#define TAEINT int		/* TAE standard integer 		*/

#define	HOST_CHAR	"SUN3/4.2BSD"	/* Host machine characteristics	*/

#define	ABNORMAL	0	/* abnormal exit status			*/
#define APLIB_COUNT	50	/* max number of $APLIB libraries	*/
#define	CHAR_ESCAPE	0x1B	/* the ASCII escape character		*/
#define	CMDLINSIZ	3000	/* max length of entire cmd line	*/
#define DELETE_CMD	"ush rm +"
#define HISTORY_LOG	20	/* number of saved interactive commands */
/* TBD: remove HNAMESIZ -- replaced by FSPECSIZ in FILEINC		*/
#define HNAMESIZ	80	/* host filespec length			*/

/***********
INT_MAXVAL is "MAXVAL for intrinsics".   It determines the size of
the value vectors in the IVP pool.   To keep this pool at a reasonable
size, we keep INT_MAXVAL quite a bit less than MAXVAL.   Note that
intrinsic parameters like PARM's DEFAULT uses MAXVAL and such can
now be allocated outside the IVP pool--see memtab in tm.c.
***********/

#define INT_MAXVAL	50	/* MAXVAL for intrinsics		*/
#define JOBNAMESIZ	15	/* max length of an async job name	*/
#define KEYSIZ		17	/* maximum length of message key 	*/
#define LARGEST_TAEINT	((TAEINT)0x7FFFFFFF)	/* largest TAEINT	*/
#define	LOGOFF		1	/* logoff exit status			*/
#define MAXACB		100	/* max # of async jobs in ACB list	*/
#define MAXADDENV	10	/* Maximum items added to environment	*/
#define	MAX_COMPACT_COUNT  ((COMPACT_COUNT)0x7FFF)  /* largest COMPACT_COUNT  */
#define MAX_COMPACT_UCOUNT ((COMPACT_UCOUNT)0xFFFF) /* largest COMPACT_UCOUNT */
#define	MAXFORVAL	50	/* max values in a FOR iteration list	*/
#define	MAXIF		10	/* max allowed IF nesting in 1 procedure*/
#define	MAXNEST		20	/* max total nesting of IFs, loops, etc.*/
#define MAX_PROC_NEST	50	/* max pdf nesting: must be < TINY	*/
#define MAXREF	        100	/* max number of references		*/
#define	MAXSTRSIZ	132	/* max # chars in a string parameter	*/
#define	MAXTITLE	1	/* max lines of TITLE text for 1 cmd	*/
#define	MAXVAL		300	/* max # values for multi-count parm	*/
#if INT_MAXVAL > MAXVAL
	compilation error: INT_MAXVAL must be <= MAXVAL.
#endif
#define MENUS_COUNT	50	/* max menu nesting			*/
#define	NAMESIZ		15	/* max # chars in a variable name	*/
#define NEXTSIZ		100	/* max bytes in previous mode help cmd	*/
#define	NODENAMESIZ	80	/* max size of a node name		*/
#define	NORMAL		1	/* normal exit status			*/
#define PIPESIZ		4096	/* UNIX pipe size in bytes		*/
#define PNAMESIZ	14	/* max length of a UNIX process name	*/
#define PREFIXSIZ	4	/* prefix size for logged records	*/
#define	PROMPTSIZ	12	/* max size of operator prompt		*/
#define QUAL_SEP	'.'	/* parm qual separator -- for tm & outboard */
#define	REG_COUNT	10	/* COUNT for $IR and $SR globals	*/
#define SMALLEST_TAEINT ((TAEINT)0x80000000)	/* smallest TAEINT	*/
#define	SUBCMDSIZ	15	/* max number of chars in a subcommand	*/
#define	STRINGSIZ	132	/* max number of chars in string	*/
#define LABELSIZ	50	/* max number chars in statement label	*/

/*  NOTE: Some of the  following SW_ definitions are not used under UNIX.
 *	  They are there for VMS compatibility only. */

#define	SW_DEBUG	0x1	/* run appl processes in debug mode	*/
#define	SW_SYSOUTS	0x2	/* capture sys$output for batch/async   */
#define SW_ASYNC_CMD 	0x4	/* run async jobs from tm.com		*/
#define	SW_DYN_LIB	0x10	/* display PDF library upon dynamic	*/
#define	SW_NO_VALIDATE	0x20	/* turn off valid value validation (TAE Plus) */
#define	SW_NO_PDFCOPY	0x40	/* RCJM switch bits: don't copy PDF	*/

#define	TOKESIZ		(MAXSTRSIZ+F_Q_NAMESIZ +10) /* max number of chars 
						  in token (w/o EOS) */
#define USERNAMESIZ	15		/* UNIX user login  name size	*/
#define F_Q_NAMESIZ	(5*NAMESIZ+1)	/* for "parm.qual"	*/


/*	Conditional compilation flags...
 */

#define UNIX		0

#ifdef AIX386
#if defined( __GNUC__) || defined(__GNUG__)
#define BIT_FIELD_ALIGN unsigned int : 0;
#else
#define BIT_FIELD_ALIGN
#endif
#endif

#ifdef AIX
#define BIT_FIELD_ALIGN unsigned int : 0;
#endif

#ifndef TAE_ASYNC		/* avoid C++ double def message		*/
#define TAE_ASYNC	0	/* async processing 			*/
#endif

#if !(defined(sun) && OSMajorVersion >= 5) && !defined(AIX)
#if defined(SYSV) || defined(macII)
#if !defined(hpux)
#define vfork() fork()
#endif
#endif /* SYSV */
#endif /* Solaris */

#define ALIGN  double		/* worst case alignment			*/

#if defined(sco)
#define BIT_FIELD_ALIGN unsigned int : 0;
#endif

#ifndef BIT_FIELD_ALIGN
#define BIT_FIELD_ALIGN
#endif

#define PROCESS_CNP	0	/* process control outside pdfprc.c	*/
#define ASCII		0	/* flag for #ifdef conditionals		*/
#define	SESSION_LOG	0	/* flag for #ifdef conditionals		*/
#define BIG_MACHINE	0	/* select 'big address space' methods	*/

/*
 */
#define f_open		f__open /* avoid conflict with the UNIX/FORTRAN */
				/* library function name		*/
#define s_copy		s__copy /* avoid conflict with UNIX/FORTRAN	*/

/*	The tae_alloc and tae_free rotines take 12 extra bytes per
 *	allocation for integrity checking on de-allocation. You can
 *	by-pass this time space burden by defining FAST_ALLOC. The
 *	price is that you eliminate integrity checking which is
 *	invaluble during development. The 12-byte burden seems small
 *	but since the typical allocation is 20-50 bytes, the overhead
 * 	is serious.
 */
#define FAST_ALLOC

#ifdef FAST_ALLOC
#define tae_alloc  calloc	/* direct use of standard allocation	*/

/* the following ifdef is a kludge intended to determine if the Sun C++
 * compiler is being used. To the best of our knowledge, that compiler is
 * the only one with a malloc.h header file defining "__malloc_h". All
 * the rest seem to use "__MALLOC_H". 
 */
#if (defined(__malloc_h) && defined(sun))
#define tae_free(A)   free( (char *)A ) /* and deallocation     */
#else
#define tae_free free
#endif

#endif

/* macros:	*/

#define	MOVE_STRUCT(A, B)	bytmov( (GENPTR)&(A), (GENPTR)&(B), sizeof(A))
#define SYNCH_EFN  synch_efn()		/* VAX/VMS efn synchronous 	*/

/*
 *	TAESTD - TAE standard definitions.
 */

/* The pseudo storage classes and data types specific to TAE.
 */
typedef	int	CODE;		/*HI: non-BOOL integer function code	*/
typedef	int	FUNINT;		/*HI: integer arg to function		*/
typedef char	*GENPTR;	/* generic pointer			*/
typedef char    *Id;            /* object handle id                     */

/* Registerable function types for scripting.	
 */
typedef Id (*T_ScriptFunction) _TAE_PROTO ((Id msg, void * context));
typedef Id (*T_ScriptedValuesFunction) _TAE_PROTO ((Id msg, void *context));


#define	FUNCTION		/* so function entry points stand out	*/
#define	ADA_FUNCTION		/* to differentiate those only for Ada bindings */
#define	CLASSIC_FUNCTION	/* to differentiate those only for TAE Monitor */
#define	UNSUPPORTED		/* undocumented functions; not yet supported */

/* TAE standard constants:	*/

/*	TBD: several of these arbritrary constants belong in TMINC	*/

#define	AMBIG		16	/* ambiguous				*/
#define	ASYNC		2	/* asynchronous runtype			*/
#define	BATCH		3	/* batch runtype			*/
#define	EOS		0	/* string terminator			*/
#ifndef FAIL
#define	FAIL		0	/* failure function status return	*/
#endif
#ifndef FALSE
#define	FALSE		0	/* false BOOLean value			*/
#endif
#define	FOREVER		1	/* condition for infinite loops		*/
#define	INTER		4	/* interactive runtype			*/
#define NORUN		5	/* "no run" runtype (from async/batch)  */
#define REMOTE		6	/* remote execution of a job		*/
#define	SUCCESS		1	/* successful function status return	*/
#ifndef TRUE
#define	TRUE		1	/* true BOOLean value			*/
#endif
#define CONTINUE	2	/* continuation of a field		*/
#define KILLED		2	/* killed via CONTROL/C			*/

/* MACROS:	*/

#ifndef MAX
#define		MAX(A, B)	((A) > (B) ? (A) : (B))
#endif
#define		NULLSTR(A)	((A)[0] == EOS)

/*
 * The file "tokencat.h" contains the ANSI standard method of token
 * concatenation. Had to place in a separate file since OASYS C++
 * balks when it sees the double pound operator.
 */

#if defined(__cplusplus) || defined(__STDC__)
#if (defined(sgi) || (defined(sun) && !(OSMajorVersion >= 5)) || defined(masscomp) || defined(__clipper__) && !defined(__GNUC__)) && !defined(__STDC__)
#define NAME2(a,b)	a/**/b
#define NAME3(a,b,c)	a/**/b/**/c
#define NAME4(a,b,c,d)	a/**/b/**/c/**/d
#else
#include <tokencat.inp>
#endif
#else
#define NAME2(a,b)	a/**/b
#define NAME3(a,b,c)	a/**/b/**/c
#define NAME4(a,b,c,d)	a/**/b/**/c/**/d
#endif

#include      <vmcoprot.h>
#endif
