/****************************************************************************
 *      Copyright (c) 1993, 1994
 *      Century Computing, Inc.
 *      ALL RIGHTS RESERVED
 *
 *      The software (programs, data bases and/or documentation) on or in
 *      any media can not be reproduced, disclosed, or used except under
 *      the terms of the TAE Plus Software License Agreement.
 *
 ***************************************************************************/



/*>>BSD UNIX<<	*/
/*	THE STANDARD HEADER
 *
 *      11-AUG-87 Added COMPACT_UCOUNT...tpl
 *	07-apr-88 Made NULL define conditional...ljn
 *	08-jun-88 Remove ascii dependency:...tp
 *		  1. replace character classification and case conversion
 *		     macros with 'chartype.inc' and 'chartype.c'.
 * 02-aug-89	PS/2 port...ljn
 * 24-feb-92	Removed abs() macro (causes too many problems)...ljn
 * 05-oct-92	IBM RS/6000 port...rt
 * 09-jul-93	VOID should be void for ANSI C only, for now...rt
 * 03-may-94	SCO port (pr-2685):  define FAST to be null, not register...swd
 *
 */

#ifndef I_STDH			/* prevent double include		*/
#define I_STDH	0


#include 	"sitedef.inp"

/* the pseudo storage classes
 */
#ifdef sco
#define FAST
#else
#define FAST	register
#endif
#define GLOBAL	
#define IMPORT	extern
#define INTERN	static

/*	The pseudo types:
 *
 *	A COUNT is used when you need only 16 bits of precision and you
 *	prefer compact object code on a 32 bit machine.  COMPACT_COUNT
 *	is used when you need only 16 bits of precision and you do not
 *	want to waste data space.
 *
 *	Generally, COUNT is used for non-repeated (e.g., scalar) 
 *	counters.  COMPACT_COUNT is used for counters in tables.
 */

typedef char TEXT;
#ifdef AIX386
typedef short TINY;		/* 'char' is unsigned on PS/2 		*/
#ifdef VOID			/* VOID is defined in /usr/include  	*/
#undef VOID
#endif
#else
#ifdef AIX
typedef short TINY;             /* 'char' is unsigned on RS/6000        */
#else
typedef char TINY;
#endif
#endif
typedef double DOUBLE;
#ifdef WIN32
typedef int BOOL;
#define VOID void
#else
#if defined(__STDC__) && !defined(_cplusplus)
typedef int BOOL;
#define VOID void
#else
typedef int BOOL, VOID;
#endif
#endif
typedef long LONG;
typedef int COUNT;
typedef short COMPACT_COUNT;
typedef short BITS; 
typedef unsigned BYTES;
typedef unsigned char UTINY;
typedef unsigned long ULONG;
typedef unsigned int UCOUNT;
typedef unsigned short COMPACT_UCOUNT;

/* system parameters
 */
#define STDIN	0
#define STDOUT	1
#define STDERR	2
#ifndef NULL
#define NULL	0
#endif
#define READ	0
#define WRITE	1
#define UPDATE	2
#define BYTMASK	0377

/*	macros
 */
#ifndef WIN32
#define max(x, y)	(((x) < (y)) ? (y) : (x))
#define min(x, y)	(((x) < (y)) ? (x) : (y))
#endif
#define gtc(pf)	(0 < (pf)->_nleft ? (--(pf)->_nleft, *(pf)->_pnext++ & BYTMASK) \
	: getc(pf))
#define ptc(pf, c) ((pf)->_nleft < 512 ? (pf)->_buf[(pf)->_nleft++] = (c) \
	: putc(pf, c))

#endif
